/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type FeatureModules = {
  _type: 'featureModules'
  backgroundColor: 'dark' | 'creme' | 'white'
  headerAlignment?: 'center' | 'left'
  header?: {
    overline?: string
    heading: string
    subhead?: string
    primaryButton?: {
      label?: string
      url?: string
      variant?:
        | 'default'
        | 'secondary'
        | 'destructive'
        | 'outline'
        | 'ghost'
        | 'whiteGhost'
        | 'whiteOutline'
      icon?: string
    }
    secondaryButton?: {
      label?: string
      url?: string
      variant?:
        | 'default'
        | 'secondary'
        | 'destructive'
        | 'outline'
        | 'ghost'
        | 'whiteGhost'
        | 'whiteOutline'
      icon?: string
    }
  }
  features?: Array<{
    icon: string
    iconContainerColor:
      | 'red-200'
      | 'blue-200'
      | 'brightYellow-200'
      | 'orange-200'
      | 'lavender-200'
      | 'waxFlower-200'
      | 'haloGreen-200'
    heading: string
    body: string
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      caption?: string
      _type: 'image'
    }
    button?: {
      label?: string
      url?: string
      icon?: string
    }
    _type: 'featureCard'
    _key: string
  }>
}

export type TestimonialBlock = {
  _type: 'testimonialBlock'
  header?: {
    overline?: string
    heading: string
    subhead?: string
    primaryButton?: {
      label?: string
      url?: string
      variant?:
        | 'default'
        | 'secondary'
        | 'destructive'
        | 'outline'
        | 'ghost'
        | 'whiteGhost'
        | 'whiteOutline'
      icon?: string
    }
    secondaryButton?: {
      label?: string
      url?: string
      variant?:
        | 'default'
        | 'secondary'
        | 'destructive'
        | 'outline'
        | 'ghost'
        | 'whiteGhost'
        | 'whiteOutline'
      icon?: string
    }
  }
  testimonials?: Array<{
    backgroundColor:
      | '#FDCDCD'
      | '#D1E7FE'
      | '#FFEEB7'
      | '#F1E5FF'
      | '#FFF1C9'
      | '#CCEADD'
      | '#FFFFFF'
    quote: string
    authorName: string
    authorTitle: string
    authorImage: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      _type: 'image'
    }
    _type: 'testimonial'
    _key: string
  }>
}

export type ValueProposition = {
  _type: 'valueProposition'
  columns?: Array<{
    columnType: 'content' | 'image' | 'testimonial'
    title?: string
    backgroundColor?:
      | '#FDCDCD'
      | '#D1E7FE'
      | '#FFEEB7'
      | '#F1E5FF'
      | '#FFF1C9'
      | '#CCEADD'
      | '#FFFFFF'
    items?: Array<{
      icon: string
      text: string
      _type: 'listItem'
      _key: string
    }>
    button?: {
      label?: string
      url?: string
      icon?: string
    }
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      _type: 'image'
    }
    quote?: string
    authorName?: string
    authorTitle?: string
    authorImage?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      _type: 'image'
    }
    _type: 'column'
    _key: string
  }>
}

export type CallToAction = {
  _type: 'callToAction'
  heading: string
  text?: string
  buttonText?: string
  link?: Link
}

export type Link = {
  _type: 'link'
  linkType?: 'href' | 'page' | 'post'
  href?: string
  page?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
  post?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'post'
  }
  openInNewTab?: boolean
}

export type InfoSection = {
  _type: 'infoSection'
  heading?: string
  subheading?: string
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      linkType?: 'href' | 'page' | 'post'
      href?: string
      page?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
      post?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'post'
      }
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>
    text?: string
    _type: 'span'
    _key: string
  }>
  style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
  listItem?: 'bullet' | 'number'
  markDefs?: Array<{
    linkType?: 'href' | 'page' | 'post'
    href?: string
    page?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'page'
    }
    post?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'post'
    }
    openInNewTab?: boolean
    _type: 'link'
    _key: string
  }>
  level?: number
  _type: 'block'
  _key: string
}>

export type PageHero = {
  _type: 'pageHero'
  color: 'dark' | 'light'
  backgroundImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  mainImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  heading: string
  subheading?: BlockContent
  mainCta?: {
    label: string
    url: string
  }
  secondaryCta?: {
    label?: string
    url?: string
  }
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  navigation?: {
    logo?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      _type: 'image'
    }
    items?: Array<
      | {
          title: string
          links?: Array<{
            title: string
            icon?: string
            type: 'internal' | 'external'
            page?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'page'
            }
            url?: string
            _key: string
          }>
          _type: 'category'
          _key: string
        }
      | {
          title: string
          icon?: string
          type: 'internal' | 'external'
          page?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page'
          }
          url?: string
          _type: 'link'
          _key: string
        }
    >
    rightSideCTA?: {
      title: string
      url: string
    }
    rightSideSecondaryLink?: {
      title: string
      url: string
    }
  }
  title: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  }
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  title: string
  description?: string
  pageBuilder?: Array<
    | ({
        _key: string
      } & PageHero)
    | ({
        _key: string
      } & ValueProposition)
    | ({
        _key: string
      } & TestimonialBlock)
    | ({
        _key: string
      } & FeatureModules)
    | ({
        _key: string
      } & CallToAction)
    | ({
        _key: string
      } & InfoSection)
  >
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  content?: BlockContent
  excerpt?: string
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date?: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'person'
  }
}

export type Person = {
  _id: string
  _type: 'person'
  _createdAt: string
  _updatedAt: string
  _rev: string
  firstName: string
  lastName: string
  picture: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | FeatureModules
  | TestimonialBlock
  | ValueProposition
  | CallToAction
  | Link
  | InfoSection
  | BlockContent
  | PageHero
  | Settings
  | Page
  | Post
  | Person
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    ...,    navigation {      ...,      items[] {        ...,        _type == "link" => {          ...,          "page": page->{ "slug": slug.current }        },        _type == "category" => {          ...,          links[] {            ...,            "page": page->{ "slug": slug.current }          }        }      }    }  }
export type SettingsQueryResult = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  navigation: {
    logo?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string
      _type: 'image'
    }
    items: Array<
      | {
          title: string
          links: Array<{
            title: string
            icon?: string
            type: 'external' | 'internal'
            page: {
              slug: string
            } | null
            url?: string
            _key: string
          }> | null
          _type: 'category'
          _key: string
        }
      | {
          title: string
          icon?: string
          type: 'external' | 'internal'
          page: {
            slug: string
          } | null
          url?: string
          _type: 'link'
          _key: string
        }
    > | null
    rightSideCTA?: {
      title: string
      url: string
    }
    rightSideSecondaryLink?: {
      title: string
      url: string
    }
  } | null
  title: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  ogImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    metadataBase?: string
    _type: 'image'
  }
} | null
// Variable: getPageQuery
// Query: *[_type == 'page' && slug.current == $slug][0]{    _id,    _type,    name,    slug,    heading,    subheading,    "pageBuilder": pageBuilder[]{      ...,      _type == "callToAction" => {          link {      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }      },      },      _type == "infoSection" => {        content[]{          ...,          markDefs[]{            ...,              _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }          }        }      },    },  }
export type GetPageQueryResult = {
  _id: string
  _type: 'page'
  name: string
  slug: Slug
  heading: null
  subheading: null
  pageBuilder: Array<
    | {
        _key: string
        _type: 'callToAction'
        heading: string
        text?: string
        buttonText?: string
        link: {
          _type: 'link'
          linkType?: 'href' | 'page' | 'post'
          href?: string
          page: string | null
          post: string | null
          openInNewTab?: boolean
        } | null
      }
    | {
        _key: string
        _type: 'featureModules'
        backgroundColor: 'creme' | 'dark' | 'white'
        headerAlignment?: 'center' | 'left'
        header?: {
          overline?: string
          heading: string
          subhead?: string
          primaryButton?: {
            label?: string
            url?: string
            variant?:
              | 'default'
              | 'destructive'
              | 'ghost'
              | 'outline'
              | 'secondary'
              | 'whiteGhost'
              | 'whiteOutline'
            icon?: string
          }
          secondaryButton?: {
            label?: string
            url?: string
            variant?:
              | 'default'
              | 'destructive'
              | 'ghost'
              | 'outline'
              | 'secondary'
              | 'whiteGhost'
              | 'whiteOutline'
            icon?: string
          }
        }
        features?: Array<{
          icon: string
          iconContainerColor:
            | 'blue-200'
            | 'brightYellow-200'
            | 'haloGreen-200'
            | 'lavender-200'
            | 'orange-200'
            | 'red-200'
            | 'waxFlower-200'
          heading: string
          body: string
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            media?: unknown
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            alt?: string
            caption?: string
            _type: 'image'
          }
          button?: {
            label?: string
            url?: string
            icon?: string
          }
          _type: 'featureCard'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'infoSection'
        heading?: string
        subheading?: string
        content: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?:
            | 'blockquote'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs: Array<{
            linkType?: 'href' | 'page' | 'post'
            href?: string
            page: string | null
            post: string | null
            openInNewTab?: boolean
            _type: 'link'
            _key: string
          }> | null
          level?: number
          _type: 'block'
          _key: string
        }> | null
      }
    | {
        _key: string
        _type: 'pageHero'
        color: 'dark' | 'light'
        backgroundImage?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          media?: unknown
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
        }
        mainImage?: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          media?: unknown
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
        }
        heading: string
        subheading?: BlockContent
        mainCta?: {
          label: string
          url: string
        }
        secondaryCta?: {
          label?: string
          url?: string
        }
      }
    | {
        _key: string
        _type: 'testimonialBlock'
        header?: {
          overline?: string
          heading: string
          subhead?: string
          primaryButton?: {
            label?: string
            url?: string
            variant?:
              | 'default'
              | 'destructive'
              | 'ghost'
              | 'outline'
              | 'secondary'
              | 'whiteGhost'
              | 'whiteOutline'
            icon?: string
          }
          secondaryButton?: {
            label?: string
            url?: string
            variant?:
              | 'default'
              | 'destructive'
              | 'ghost'
              | 'outline'
              | 'secondary'
              | 'whiteGhost'
              | 'whiteOutline'
            icon?: string
          }
        }
        testimonials?: Array<{
          backgroundColor:
            | '#CCEADD'
            | '#D1E7FE'
            | '#F1E5FF'
            | '#FDCDCD'
            | '#FFEEB7'
            | '#FFF1C9'
            | '#FFFFFF'
          quote: string
          authorName: string
          authorTitle: string
          authorImage: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            media?: unknown
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            alt: string
            _type: 'image'
          }
          _type: 'testimonial'
          _key: string
        }>
      }
    | {
        _key: string
        _type: 'valueProposition'
        columns?: Array<{
          columnType: 'content' | 'image' | 'testimonial'
          title?: string
          backgroundColor?:
            | '#CCEADD'
            | '#D1E7FE'
            | '#F1E5FF'
            | '#FDCDCD'
            | '#FFEEB7'
            | '#FFF1C9'
            | '#FFFFFF'
          items?: Array<{
            icon: string
            text: string
            _type: 'listItem'
            _key: string
          }>
          button?: {
            label?: string
            url?: string
            icon?: string
          }
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            media?: unknown
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            alt: string
            _type: 'image'
          }
          quote?: string
          authorName?: string
          authorTitle?: string
          authorImage?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            media?: unknown
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            alt: string
            _type: 'image'
          }
          _type: 'column'
          _key: string
        }>
      }
  > | null
} | null
// Variable: sitemapData
// Query: *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {    "slug": slug.current,    _type,    _updatedAt,  }
export type SitemapDataResult = Array<
  | {
      slug: string
      _type: 'page'
      _updatedAt: string
    }
  | {
      slug: string
      _type: 'post'
      _updatedAt: string
    }
>
// Variable: allPostsQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type AllPostsQueryResult = Array<{
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
}>
// Variable: morePostsQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type MorePostsQueryResult = Array<{
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
}>
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content[]{    ...,    markDefs[]{      ...,        _type == "link" => {    "page": page->slug.current,    "post": post->slug.current  }    }  },      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{firstName, lastName, picture},  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
    listItem?: 'bullet' | 'number'
    markDefs: Array<{
      linkType?: 'href' | 'page' | 'post'
      href?: string
      page: string | null
      post: string | null
      openInNewTab?: boolean
      _type: 'link'
      _key: string
    }> | null
    level?: number
    _type: 'block'
    _key: string
  }> | null
  _id: string
  status: 'draft' | 'published'
  title: string
  slug: string
  excerpt: string | null
  coverImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  date: string
  author: {
    firstName: string
    lastName: string
    picture: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: 'image'
    }
  } | null
} | null
// Variable: postPagesSlugs
// Query: *[_type == "post" && defined(slug.current)]  {"slug": slug.current}
export type PostPagesSlugsResult = Array<{
  slug: string
}>
// Variable: pagesSlugs
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type PagesSlugsResult = Array<{
  slug: string
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "settings"][0]{\n    ...,\n    navigation {\n      ...,\n      items[] {\n        ...,\n        _type == "link" => {\n          ...,\n          "page": page->{ "slug": slug.current }\n        },\n        _type == "category" => {\n          ...,\n          links[] {\n            ...,\n            "page": page->{ "slug": slug.current }\n          }\n        }\n      }\n    }\n  }\n': SettingsQueryResult
    '\n  *[_type == \'page\' && slug.current == $slug][0]{\n    _id,\n    _type,\n    name,\n    slug,\n    heading,\n    subheading,\n    "pageBuilder": pageBuilder[]{\n      ...,\n      _type == "callToAction" => {\n        \n  link {\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n      }\n,\n      },\n      _type == "infoSection" => {\n        content[]{\n          ...,\n          markDefs[]{\n            ...,\n            \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n          }\n        }\n      },\n    },\n  }\n': GetPageQueryResult
    '\n  *[_type == "page" || _type == "post" && defined(slug.current)] | order(_type asc) {\n    "slug": slug.current,\n    _type,\n    _updatedAt,\n  }\n': SitemapDataResult
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': AllPostsQueryResult
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': MorePostsQueryResult
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    content[]{\n    ...,\n    markDefs[]{\n      ...,\n      \n  _type == "link" => {\n    "page": page->slug.current,\n    "post": post->slug.current\n  }\n\n    }\n  },\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{firstName, lastName, picture},\n\n  }\n': PostQueryResult
    '\n  *[_type == "post" && defined(slug.current)]\n  {"slug": slug.current}\n': PostPagesSlugsResult
    '\n  *[_type == "page" && defined(slug.current)]\n  {"slug": slug.current}\n': PagesSlugsResult
  }
}
